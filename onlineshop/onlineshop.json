{
  "fileName": "onlineshop.jar",
  "findings": [
    {
      "ID": 1,
      "source": {
        "targetName": "getParameter",
        "targetNo": 1,
        "statement": "String firstname = request.getParameter(\"firstname\");",
        "methodName": "public void doRegistration(HttpServletRequest request, HttpServletResponse response)",
        "className": "onlineshop.api.ShopController",
        "lineNo": 51,
        "IRs": [
          {
            "type": "Jimple",
            "IRstatement": ""
          }
        ]
      },
      "sink": {
        "targetName": "sendRedirect",
        "targetNo": 1,
        "statement": "response.sendRedirect(str.toString());",
        "methodName": "public void doRegistration(HttpServletRequest request, HttpServletResponse response)",
        "className": "onlineshop.api.ShopController",
        "lineNo": 65,
        "IRs": [
          {
            "type": "Jimple",
            "IRstatement": ""
          }
        ]
      },
      "intermediateFlows": [
        {
          "statement": "str.append(firstname);",
          "methodName": "public void doRegistration(HttpServletRequest request, HttpServletResponse response)",
          "className": "onlineshop.api.ShopController",
          "lineNo": 64,
          "ID": 1
        }
      ],
      "description": "Reflected XSS",
      "isNegative": false,
      "attributes": {}
    },
    {
      "ID": 2,
      "source": {
        "targetName": "getParameter",
        "targetNo": 1,
        "statement": "String fileName = request.getParameter(\"fileName\");",
        "methodName": "public void deleteOrders(HttpServletRequest request, HttpServletResponse response)",
        "className": "onlineshop.api.ShopController",
        "lineNo": 128,
        "IRs": [
          {
            "type": "Jimple",
            "IRstatement": ""
          }
        ]
      },
      "sink": {
        "targetName": "delete",
        "targetNo": 1,
        "statement": "f.delete();",
        "methodName": "public void deleteOrders(String fileName, User user)",
        "className": "onlineshop.service.ProductService",
        "lineNo": 74,
        "IRs": [
          {
            "type": "Jimple",
            "IRstatement": ""
          }
        ]
      },
      "intermediateFlows": [
        {
          "statement": "productService.deleteOrders(fileName, UserDetailsServiceImpl.getCurrentUser());",
          "methodName": "public void deleteOrders(HttpServletRequest request, HttpServletResponse response)",
          "className": "onlineshop.api.ShopController",
          "lineNo": 130,
          "ID": 1
        },
        {
          "statement": "str.append(fileName);",
          "methodName": "public void deleteOrders(String fileName, User user)",
          "className": "onlineshop.service.ProductService",
          "lineNo": 70,
          "ID": 2
        },
        {
          "statement": "File f = new File(str.toString());",
          "methodName": "public void deleteOrders(String fileName, User user)",
          "className": "onlineshop.service.ProductService",
          "lineNo": 72,
          "ID": 3
        }
      ],
      "description": "Path Traversal",
      "isNegative": false,
      "attributes": {}
    },
    {
      "ID": 3,
      "source": {
        "targetName": "getParameter",
        "targetNo": 1,
        "statement": "String medName = request.getParameter(\"medName\");",
        "methodName": "public String search(HttpServletRequest request, Model model)",
        "className": "onlineshop.api.ShopController",
        "lineNo": 121,
        "IRs": [
          {
            "type": "Jimple",
            "IRstatement": ""
          }
        ]
      },
      "sink": {
        "targetName": "createQuery",
        "targetNo": 1,
        "statement": "return this.em.createQuery(\"SELECT m FROM Medication m where m.name like '%\" + medName + \"%'\", Medication.class).getResultList();",
        "methodName": "public List<Medication> getProducts(String medName)",
        "className": "onlineshop.service.ProductService",
        "lineNo": 92,
        "IRs": [
          {
            "type": "Jimple",
            "IRstatement": ""
          }
        ]
      },
      "intermediateFlows": [],
      "description": "SQL Injection",
      "isNegative": false,
      "attributes": {}
    },
    {
      "ID": 4,
      "source": {
        "targetName": "getParameter",
        "targetNo": 1,
        "statement": "int medicationId = Integer.parseInt(request.getParameter(\"medicationId\"));",
        "methodName": "public void placeOrder(HttpServletRequest request, HttpServletResponse response)",
        "className": "onlineshop.api.ShopController",
        "lineNo": 103,
        "IRs": [
          {
            "type": "Jimple",
            "IRstatement": ""
          }
        ]
      },
      "sink": {
        "targetName": "createQuery",
        "targetNo": 1,
        "statement": "return (Medication) this.em.createQuery(\"SELECT m FROM Medication m WHERE m.id = \" + medicationId, Medication.class).getSingleResult();",
        "methodName": "public Medication getMedication(long medicationId)",
        "className": "onlineshop.service.ProductService",
        "lineNo": 105,
        "IRs": [
          {
            "type": "Jimple",
            "IRstatement": ""
          }
        ]
      },
      "intermediateFlows": [
        {
          "statement": "this.productService.placeOrder(UserDetailsServiceImpl.getCurrentUser(), this.productService.getMedication((long) medicationId), (long) quantity);",
          "methodName": "public void placeOrder(HttpServletRequest request, HttpServletResponse response)",
          "className": "onlineshop.api.ShopController",
          "lineNo": 106,
          "ID": 1
        },
        {
          "statement": "public Medication getMedication(long medicationId) {",
          "methodName": "public Medication getMedication(long medicationId)",
          "className": "onlineshop.service.ProductService",
          "lineNo": 103,
          "ID": 2
        }
      ],
      "description": "False positive",
      "isNegative": true,
      "attributes": {}
    },
    {
      "ID": 5,
      "source": {
        "targetName": "getParameter",
        "targetNo": 1,
        "statement": "this.commentService.saveComment(new Comment(UserDetailsServiceImpl.getCurrentUser(), request.getParameter(\"comment\"), this.productService.getMedication((long) Integer.parseInt(request.getParameter(\"medicationId\")))));",
        "methodName": "public void createComment(HttpServletRequest request, HttpServletResponse response)",
        "className": "onlineshop.api.ShopController",
        "lineNo": 115,
        "IRs": [
          {
            "type": "Jimple",
            "IRstatement": ""
          }
        ]
      },
      "sink": {
        "targetName": "createQuery",
        "targetNo": 1,
        "statement": "return (Medication) this.em.createQuery(\"SELECT m FROM Medication m WHERE m.id = \" + medicationId, Medication.class).getSingleResult();",
        "methodName": "public Medication getMedication(long medicationId)",
        "className": "onlineshop.service.ProductService",
        "lineNo": 105,
        "IRs": [
          {
            "type": "Jimple",
            "IRstatement": ""
          }
        ]
      },
      "intermediateFlows": [
        {
          "statement": "public Medication getMedication(long medicationId) {",
          "methodName": "public Medication getMedication(long medicationId)",
          "className": "onlineshop.service.ProductService",
          "lineNo": 103,
          "ID": 1
        }
      ],
      "description": "False positive.",
      "isNegative": true,
      "attributes": {}
    },
    {
      "ID": 6,
      "source": {
        "targetName": "getParameter",
        "targetNo": 1,
        "statement": "this.commentService.saveComment(new Comment(UserDetailsServiceImpl.getCurrentUser(), request.getParameter(\"comment\"), this.productService.getMedication((long) Integer.parseInt(request.getParameter(\"medicationId\")))));",
        "methodName": "public void createComment(HttpServletRequest request, HttpServletResponse response)",
        "className": "onlineshop.api.ShopController",
        "lineNo": 115,
        "IRs": [
          {
            "type": "Jimple",
            "IRstatement": ""
          }
        ]
      },
      "sink": {
        "targetName": "persist",
        "targetNo": 1,
        "statement": "this.em.persist(comment);",
        "methodName": "public void saveComment(Comment comment)",
        "className": "onlineshop.service.CommentService",
        "lineNo": 24,
        "IRs": [
          {
            "type": "Jimple",
            "IRstatement": ""
          }
        ]
      },
      "intermediateFlows": [
        {
          "statement": "comment.setText(new Sanitizer().sanitize(comment.getText()));",
          "methodName": "public void saveComment(Comment comment)",
          "className": "onlineshop.service.CommentService",
          "lineNo": 23,
          "ID": 1
        }
      ],
      "description": "Stored XSS",
      "isNegative": false,
      "attributes": {}
    },
    {
      "ID": 7,
      "source": {
        "targetName": "getParameter",
        "targetNo": 1,
        "statement": "String username = request.getParameter(\"username\");",
        "methodName": "public void doRegistration(HttpServletRequest request, HttpServletResponse response)",
        "className": "onlineshop.api.ShopController",
        "lineNo": 48,
        "IRs": [
          {
            "type": "Jimple",
            "IRstatement": ""
          }
        ]
      },
      "sink": {
        "targetName": "persist",
        "targetNo": 1,
        "statement": "this.entityManager.persist(user);",
        "methodName": "public User createNewUser(User user)",
        "className": "onlineshop.service.UserDetailsServiceImpl",
        "lineNo": 47,
        "IRs": [
          {
            "type": "Jimple",
            "IRstatement": ""
          }
        ]
      },
      "intermediateFlows": [
        {
          "statement": "public User createNewUser(User user) {",
          "methodName": "public User createNewUser(User user)",
          "className": "onlineshop.service.UserDetailsServiceImpl",
          "lineNo": 45,
          "ID": 1
        },
        {
          "statement": "user.setPassword(this.passwordEncoder.encode(user.getPassword()));",
          "methodName": "public User createNewUser(User user)",
          "className": "onlineshop.service.UserDetailsServiceImpl",
          "lineNo": 46,
          "ID": 2
        },
        {
          "statement": "User user = new User(username, password);",
          "methodName": "public void doRegistration(HttpServletRequest request, HttpServletResponse response)",
          "className": "onlineshop.api.ShopController",
          "lineNo": 56,
          "ID": 3
        },
        {
          "statement": "this.userService.createNewUser(user);",
          "methodName": "public void doRegistration(HttpServletRequest request, HttpServletResponse response)",
          "className": "onlineshop.api.ShopController",
          "lineNo": 60,
          "ID": 4
        }
      ],
      "description": "Stored SQL Injection",
      "isNegative": false,
      "attributes": {}
    },
    {
      "ID": 8,
      "source": {
        "targetName": "getParameter",
        "targetNo": 1,
        "statement": "String address = request.getParameter(\"address\");",
        "methodName": "public void doRegistration(HttpServletRequest request, HttpServletResponse response)",
        "className": "onlineshop.api.ShopController",
        "lineNo": 53,
        "IRs": [
          {
            "type": "Jimple",
            "IRstatement": ""
          }
        ]
      },
      "sink": {
        "targetName": "persist",
        "targetNo": 1,
        "statement": "this.entityManager.persist(user);",
        "methodName": "public User createNewUser(User user)",
        "className": "onlineshop.service.UserDetailsServiceImpl",
        "lineNo": 47,
        "IRs": [
          {
            "type": "Jimple",
            "IRstatement": ""
          }
        ]
      },
      "intermediateFlows": [
        {
          "statement": "user.setAddress(address);",
          "methodName": "public void doRegistration(HttpServletRequest request, HttpServletResponse response)",
          "className": "onlineshop.api.ShopController",
          "lineNo": 59,
          "ID": 1
        },
        {
          "statement": "this.userService.createNewUser(user);",
          "methodName": "public void doRegistration(HttpServletRequest request, HttpServletResponse response)",
          "className": "onlineshop.api.ShopController",
          "lineNo": 60,
          "ID": 2
        },
        {
          "statement": "public User createNewUser(User user) {",
          "methodName": "public User createNewUser(User user)",
          "className": "onlineshop.service.UserDetailsServiceImpl",
          "lineNo": 45,
          "ID": 3
        }
      ],
      "description": "False positive.",
      "isNegative": true,
      "attributes": {}
    },
    {
      "ID": 9,
      "source": {
        "targetName": "getParameter",
        "targetNo": 1,
        "statement": "String firstname = request.getParameter(\"firstname\");",
        "methodName": "public void doRegistration(HttpServletRequest request, HttpServletResponse response)",
        "className": "onlineshop.api.ShopController",
        "lineNo": 51,
        "IRs": [
          {
            "type": "Jimple",
            "IRstatement": ""
          }
        ]
      },
      "sink": {
        "targetName": "persist",
        "targetNo": 1,
        "statement": "this.entityManager.persist(user);",
        "methodName": "public User createNewUser(User user)",
        "className": "onlineshop.service.UserDetailsServiceImpl",
        "lineNo": 47,
        "IRs": [
          {
            "type": "Jimple",
            "IRstatement": ""
          }
        ]
      },
      "intermediateFlows": [
        {
          "statement": "user.setFirstName(firstname);",
          "methodName": "public void doRegistration(HttpServletRequest request, HttpServletResponse response)",
          "className": "onlineshop.api.ShopController",
          "lineNo": 57,
          "ID": 1
        },
        {
          "statement": "this.userService.createNewUser(user);",
          "methodName": "public void doRegistration(HttpServletRequest request, HttpServletResponse response)",
          "className": "onlineshop.api.ShopController",
          "lineNo": 60,
          "ID": 2
        },
        {
          "statement": "public User createNewUser(User user) {",
          "methodName": "public User createNewUser(User user)",
          "className": "onlineshop.service.UserDetailsServiceImpl",
          "lineNo": 45,
          "ID": 3
        }
      ],
      "description": "False positive.",
      "isNegative": true,
      "attributes": {}
    },
    {
      "ID": 10,
      "source": {
        "targetName": "getParameter",
        "targetNo": 1,
        "statement": "String lastname = request.getParameter(\"lastname\");",
        "methodName": "public void doRegistration(HttpServletRequest request, HttpServletResponse response)",
        "className": "onlineshop.api.ShopController",
        "lineNo": 52,
        "IRs": [
          {
            "type": "Jimple",
            "IRstatement": ""
          }
        ]
      },
      "sink": {
        "targetName": "persist",
        "targetNo": 1,
        "statement": "this.entityManager.persist(user);",
        "methodName": "public User createNewUser(User user)",
        "className": "onlineshop.service.UserDetailsServiceImpl",
        "lineNo": 47,
        "IRs": [
          {
            "type": "Jimple",
            "IRstatement": ""
          }
        ]
      },
      "intermediateFlows": [
        {
          "statement": "user.setLastName(lastname);",
          "methodName": "public void doRegistration(HttpServletRequest request, HttpServletResponse response)",
          "className": "onlineshop.api.ShopController",
          "lineNo": 58,
          "ID": 1
        },
        {
          "statement": "this.userService.createNewUser(user);",
          "methodName": "public void doRegistration(HttpServletRequest request, HttpServletResponse response)",
          "className": "onlineshop.api.ShopController",
          "lineNo": 60,
          "ID": 2
        },
        {
          "statement": "public User createNewUser(User user) {",
          "methodName": "public User createNewUser(User user)",
          "className": "onlineshop.service.UserDetailsServiceImpl",
          "lineNo": 45,
          "ID": 3
        }
      ],
      "description": "False positive.",
      "isNegative": true,
      "attributes": {}
    },
    {
      "ID": 11,
      "source": {
        "targetName": "getParameter",
        "targetNo": 1,
        "statement": "String fileName = request.getParameter(\"fileName\");",
        "methodName": "public void getOrders(HttpServletRequest request, HttpServletResponse response)",
        "className": "onlineshop.api.ShopController",
        "lineNo": 91,
        "IRs": [
          {
            "type": "Jimple",
            "IRstatement": ""
          }
        ]
      },
      "sink": {
        "targetName": "copy",
        "targetNo": 1,
        "statement": "IOUtils.copy(new FileInputStream(str.toString()), response.getOutputStream());",
        "methodName": "public void getOrders(HttpServletRequest request, HttpServletResponse response)",
        "className": "onlineshop.api.ShopController",
        "lineNo": 95,
        "IRs": [
          {
            "type": "Jimple",
            "IRstatement": ""
          }
        ]
      },
      "intermediateFlows": [
        {
          "statement": "str.append(fileName);",
          "methodName": "public void getOrders(HttpServletRequest request, HttpServletResponse response)",
          "className": "onlineshop.api.ShopController",
          "lineNo": 93,
          "ID": 1
        }
      ],
      "description": "Path Traversal.",
      "isNegative": false,
      "attributes": {}
    }
  ]
}